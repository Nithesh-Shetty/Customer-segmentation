# -*- coding: utf-8 -*-
"""Project deployment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1G4562VjRyqnVzfO62eD1Cfo2zV5pm5uh
"""

# Importing libraries
import pandas as pd
import streamlit as st
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans

df=pd.read_excel("marketing_campaign1.xlsx")

#Adding age column
df["Age"] = 2023 - df["Year_Birth"]

#Dropping the column which are not required.
df=df.drop(["Z_CostContact","Z_Revenue","Year_Birth","ID","Dt_Customer"],axis=1)

# simplifying Education field.
df["Education"] = df["Education"].replace({"Graduation":"Graduate","PhD":"Post-Graduate","Master":"Post-Graduate","2n Cycle":"Graduate","Basic":"Under Graduate",})

# simplifying Marital Status field.
df["Marital_Status"] = df["Marital_Status"].replace({"Married": "Partner", "Together": "Partner", "Absurd": "Single", "Widow": "Single", "YOLO": "Single", "Divorced": "Single", "Single": "Single","Alone":"Single"})

#Skewness of "Income" Disrribution 
print("Skewness: ",np.round(df["Income"].skew(),2))

#Deleting outliers from income column
Q1 = df['Income'].quantile(0.25)
Q3 = df['Income'].quantile(0.75)
IQR = Q3 - Q1
outlier = df[(df['Income'] < (Q1 - 1.5 * IQR)) | (df['Income'] > (Q3 + 1.5 * IQR))]
print("No. of outliers detected and deleted in income :", len(outlier))
df = df[~((df['Income'] < (Q1 - 1.5 * IQR)) | (df['Income'] > (Q3 + 1.5 * IQR)))]

#Imputing mean to the income column
df['Income'].fillna(df["Income"].mean(),inplace=True)

#Deleting outliers from Age column
Q1 = df['Age'].quantile(0.25)
Q3 = df['Age'].quantile(0.75)
IQR = Q3 - Q1
outlier = df[(df['Age'] < (Q1 - 1.5 * IQR)) | (df['Age'] > (Q3 + 1.5 * IQR))]
print("No. of outliers detected and deleted in Age :", len(outlier))
df = df[~((df['Age'] < (Q1 - 1.5 * IQR)) | (df['Age'] > (Q3 + 1.5 * IQR)))]

# Creating bins of different age group
bin_edges = [25,40,60,100]
bin_labels = ["20-40", '40-60', '60+']
df['Age_group'] = pd.cut(df['Age'], bins=bin_edges, labels=bin_labels)
df.drop("Age",axis=1,inplace=True)

df["Total_amt_spent"]=df["MntWines"]+df["MntFruits"]+df["MntMeatProducts"]+df["MntFishProducts"]+df["MntSweetProducts"]+df["MntGoldProds"]
df.drop(["MntWines","MntMeatProducts","MntFishProducts","MntSweetProducts","MntGoldProds","MntFruits"],axis=1,inplace=True)

#Dropping outliers in from total spent
Q1 = df["Total_amt_spent"].quantile(0.25)
Q3 = df["Total_amt_spent"].quantile(0.75)
IQR = Q3 - Q1
outlier = df[(df["Total_amt_spent"] < (Q1 - 1.5 * IQR)) | (df["Total_amt_spent"] > (Q3 + 1.5 * IQR))]
print("No. of outliers detected and deleted in income :", len(outlier))
df = df[~((df["Total_amt_spent"] < (Q1 - 1.5 * IQR)) | (df["Total_amt_spent"] > (Q3 + 1.5 * IQR)))]

df['AcceptedCmp'] = df['AcceptedCmp1'] + df['AcceptedCmp2']+df['AcceptedCmp3']+df['AcceptedCmp4']+df['AcceptedCmp5']
df.drop(['AcceptedCmp1','AcceptedCmp2','AcceptedCmp3','AcceptedCmp4','AcceptedCmp5'],axis=1,inplace=True)

df1=df[['Income','Total_amt_spent', 'AcceptedCmp','Age_group_20-40',
       'Age_group_40-60', 'Age_group_60+','Marital_Status_Partner', 'Marital_Status_Single',]]

st.title('Model Deployment: Logistic Regression')

st.sidebar.header('User Input Parameters')
def user_input_features():
    Income = st.sidebar.number_input("Enter Income in USD")
    Total_amt_spent=st.sidebar.number_input("Enter Total Amount Spent")
    AcceptedCmp=st.sidebar.number_input("Enter totel campaigns accepted")
    Age_group_20_40 = st.sidebar.selectbox('Age_group_20-40',("1","0"))
    Age_group_40_60 = st.sidebar.selectbox('Age_group_40-60',("1","0"))
    Age_group_60 = st.sidebar.selectbox('Age_group_60+',("1","0"))
    Marital_Status_Partner=st.sidebar.selectbox('Marital_Status_Partner',("1","0"))
    Marital_Status_Single=st.sidebar.selectbox('Marital_Status_Single',("1","0"))

    data = {'Income':Income,
            'Total_amt_spent':Total_amt_spent,
            'AcceptedCmp':AcceptedCmp,
            'Age_group_20-40':Age_group_20_40,
            'Age_group_40-60': Age_group_40_60,
            'Age_group_60+':Age_group_60,
             'Marital_Status_Partner': Marital_Status_Partner,
            'Marital_Status_Single':Marital_Status_Single
            }
    features = pd.DataFrame(data,index = [0])
    return features 
    
df2 = user_input_features()
st.subheader('User Input parameters')
st.write(df2)

frames = [df1, df2]
df1 = pd.concat(frames)

#Standardization of the data
scaler = StandardScaler()
scaled_df1 = scaler.fit_transform(df1)

# Applying PCA
pca1 = PCA(n_components = 3)
pca_values1 = pca1.fit_transform(scaled_df1)

pca_values1 = pd.DataFrame(data = pca_values1, columns=['PC1', 'PC2', 'PC3'])

model_kmeans1 = KMeans(n_clusters=4, random_state=0, init='k-means++')
y_predict_kmeans2 = model_kmeans1.fit_predict(pca_values1)

st.subheader('Predicted Result')
st.write(model_kmeans1.labels_[-1])
